#!/bin/sh
#
# /etc/rc.d/rc.sysinit - run once at boot time
#
# Taken in part from Miquel van Smoorenburg's bcheckrc.
#

# Use a safe umask
#umask 077

# Don't do coredumps
ulimit -Sc 0 >/dev/null 2>&1

trap '' SIGPIPE

# Rerun ourselves through initlog
if [ -z "$IN_INITLOG" -a -x /sbin/initlog ]; then
	exec /sbin/initlog $INITLOG_ARGS -r /etc/rc.d/rc.sysinit
fi

WITHOUT_RC_COMPAT=1

# Source function library
. /etc/init.d/functions

# Fix console loglevel
dmesg -n "$LOGLEVEL"

HOSTNAME=`hostname`

# Read in config data
if ! SourceIfNotEmpty /etc/sysconfig/network; then
	NETWORKING=no
fi

if [ -z "$HOSTNAME" -o "$HOSTNAME" = "(none)" ]; then
	HOSTNAME=localhost
fi

# Set system font
ExecIfExecutable /sbin/setsysfont >/dev/null 2>&1 && SETSYSFONT_DONE=1 || SETSYSFONT_DONE=

PrintMargin()
{
	if [ "$BOOTUP" != serial ]; then
		local n
		n=`echo -n "$*" |wc -c` 2>/dev/null &&
			tput hpa $(( (COLUMNS - n)/2 ))
	fi
}

# Print a banner. ;)
WELCOME="Welcome to "
BANNER="ALT Linux"
PrintMargin "$WELCOME$BANNER"
echo -n "$WELCOME"
SETCOLOR_INFO
echo -n "$BANNER"
SETCOLOR_NORMAL
echo

if is_yes "$PROMPT"; then
	PROMPT=1
	MESSAGE="Press 'I' to enter interactive startup"
	PrintMargin "$MESSAGE"
	echo "$MESSAGE"
else
	PROMPT=
fi

# Mount /proc (done here so volume labels can work with fsck)
action "Mounting proc filesystem:" mount -n -t proc proc /proc
chgrp proc /proc >/dev/null 2>&1 ||:

# Mount /sys where appropriate
if grep -wqs sysfs /proc/filesystems; then
	action "Mounting sys filesystem:" mount -n -t sysfs sysfs /sys
fi

# Initialize bootsplash subsystem.
splash_init 5

splash_update start 1

# Load modules
/etc/rc.d/scripts/load_modules

RUN_UDEV=
udevd_exe=/etc/init.d/udevd
[ ! -x "$udevd_exe" ] ||
	grep -iwqs noudev /proc/cmdline ||
	RUN_UDEV=1

# Start udev
if [ -n "$RUN_UDEV" ]; then
	RUN_FROM_SYSINIT=1 "$udevd_exe" start
	[ -c /dev/rtc ] || modprobe rtc >/dev/null 2>&1
fi

# Set the system clock (when /etc/adjtime is missing)
[ -s /etc/adjtime ] || /etc/init.d/clock start

# Activate swap
action "Activating swap partitions:" swapon -a -e

# Set the hostname
action "Setting hostname $HOSTNAME:" hostname "$HOSTNAME"

# Set the NIS domain name
if [ -n "$NISDOMAIN" ] && ! is_no "$NISDOMAIN"; then
	action "Setting NIS domain name $NISDOMAIN:" domainname "$NISDOMAIN"
fi

if [ -f /fastboot ] || grep -iwqs fastboot /proc/cmdline; then
	fastboot=yes
else
	fastboot=
fi

if [ -n "$FSCKOPTIONS" ]; then
	fsckoptions="$FSCKOPTIONS"
else
	fsckoptions=
fi

if [ -f /forcefsck ]; then
	fsckoptions="-f $fsckoptions"
fi

if [ "$BOOTUP" != "serial" ]; then
	fsckoptions="-C $fsckoptions"
else
	fsckoptions="-V $fsckoptions"
fi

_RUN_QUOTACHECK=0
ROOTFSTYPE=`fgrep ' / ' /proc/mounts |tail -1 |cut -d' ' -f3`
if [ -z "$fastboot" -a "$ROOTFSTYPE" != nfs ]; then
	STRING="Checking root filesystem"
	echo "$STRING"
	initlog -c "fsck -Tay $fsckoptions /"
	rc=$?

	# The exit code returned by fsck is the sum of the following conditions:
	#     0    - No errors
	#     1    - File system errors corrected
	#     2    - System should be rebooted
	#     4    - File system errors left uncorrected
	#     8    - Operational error
	#     16   - Usage or syntax error
	#     32   - Fsck canceled by user request
	#     128  - Shared library error

	if [ $rc = 0 ]; then
		success "$STRING"
		echo
	elif [ $rc = 1 ]; then
		passed "$STRING"
		echo
	else
		failure "$STRING"
		echo
	fi

	if [ $rc -gt 1 ]; then
		# A return of 3 or higher means there were serious problems.
		if [ $rc -gt 3 ]; then
			echo
			echo "*** An error occurred during the file system check."
			echo "*** Dropping you to a shell; the system will reboot"
			echo "*** when you leave the shell."

			PS1="(Repair filesystem) \# # "; export PS1
			sulogin
		fi

		echo "Remounting root filesystem readonly."
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot -f
	elif [ $rc = 1 ]; then
		_RUN_QUOTACHECK=1
	fi
fi

# Remount the root filesystem read-write
splash_update remount 2
action "Remounting root filesystem in read/write mode:" ${REMOUNT_ROOTFS_RW_COMMAND:-mount -n -o remount,rw /}

# The root filesystem is now read-write, so we can now log via syslog() directly
[ -z "$IN_INITLOG" ] || IN_INITLOG=

# Clear mtab
[ -L /etc/mtab ] || >/etc/mtab

# Set the system clock (when /etc/adjtime is present)
[ ! -s /etc/adjtime ] || /etc/init.d/clock start

# Remove stale backups
rm -f /etc/mtab~ /etc/mtab~~

# Enter root and /proc into mtab. (pixel) also added /initrd/loopfs for loopback root
mount -f /initrd/loopfs 2>/dev/null
mount -f /
mount -f /proc
[ -d /sys/bus ] && mount -f -t sysfs sysfs /sys
[ -f /proc/bus/usb/devices ] && mount -f -t usbfs usbfs /proc/bus/usb
! mountpoint -q /dev || mount -f -t tmpfs udevfs /dev
! mountpoint -q /dev/pts || mount -f -t devpts devpts /dev/pts
! mountpoint -q /dev/shm || mount -f -t tmpfs shmfs /dev/shm

# Set hard disk parameters
/etc/rc.d/scripts/idetune

# Update quotas if fsck was run on /
QUOTACHECK=/sbin/quotacheck
if [ "$_RUN_QUOTACHECK" = 1 -a -x "$QUOTACHECK" ]; then
	action "Checking root filesystem quotas:" "$QUOTACHECK" -v /
fi

echo "$HOSTNAME" >/etc/HOSTNAME

if [ -z "$USEMODULES" ]; then
	if [ -f /proc/ksyms -o -f /proc/kallsyms ] && ! grep -iwqs nomodules /proc/cmdline; then
		USEMODULES=y
	else
		USEMODULES=n
	fi
fi

# Load modules where appropriate
splash_update depmod 3
if [ -z "$fastboot" -a -x /sbin/depmod ] && is_yes "$USEMODULES"; then
	INITLOG_ARGS= action "Finding module dependencies:" depmod -A
fi

# Configure kernel parameters
splash_update kernel 4
action "Configuring kernel parameters:" sysctl -e -p /etc/sysctl.conf

if [ -f /proc/sys/kernel/modprobe ]; then
	if is_yes "$USEMODULES"; then
		if [ -z "$RUN_UDEV" ]; then
			sysctl -w kernel.modprobe="/sbin/modprobe" >/dev/null 2>&1
			sysctl -w kernel.hotplug="/sbin/hotplug" >/dev/null 2>&1
		fi
	else
		# We used to set this to NULL, but that causes 'failed to exec' messages"
		sysctl -w kernel.modprobe="/bin/true" >/dev/null 2>&1
		sysctl -w kernel.hotplug="/bin/true" >/dev/null 2>&1
	fi
fi

OLD_COLUMNS="$COLUMNS"

# Load framebuffer device settings
/etc/rc.d/scripts/framebuffer_init

# Set system font again, if required
if [ "$OLD_COLUMNS" != "$COLUMNS" ]; then
	ExecIfExecutable /sbin/setsysfont >/dev/null 2>&1 && SETSYSFONT_DONE=1 || SETSYSFONT_DONE=
fi

# Load device-mapper, create its device file
if [ -e /proc/devices -a -e /proc/misc ]; then
	rm -f /dev/mapper/control
	modprobe dm-mod >/dev/null 2>&1
	if [ -z "$RUN_UDEV" ]; then
		MAJOR="$(sed -ne 's/^ *\([0-9]\+\) \+misc$/\1/p' /proc/devices)"
		MINOR="$(sed -ne 's/^ *\([0-9]\+\) \+device-mapper$/\1/p' /proc/misc)"
		if [ -n "$MAJOR" -a -n "$MINOR" ]; then
			mkdir -p -m755 /dev/mapper
			action "Creating device-mapper character device ($MAJOR, $MINOR):" \
				mknod --mode=600 /dev/mapper/control c "$MAJOR" "$MINOR"
		fi
		unset MAJOR MINOR
	fi
fi

# Activate EVMS
EVMS_ACTIVE=
STARTEVMS=/sbin/startevms
if [ -x "$STARTEVMS" ] && ! grep -iwqs noevms /proc/cmdline; then
	action "Starting up EVMS:" "$STARTEVMS" init
	EVMS_ACTIVE=1
fi

# Add raid devices
if [ -z "$EVMS_ACTIVE" ] && [ -f /proc/mdstat ]; then
	# A non-zero return means there were problems.
	if ! /etc/rc.d/scripts/raidstart; then
		echo
		echo
		echo "*** An error occurred during the RAID startup."
		stop=
		if grep -iwqs 'onraiderror=stop' /proc/cmdline; then
			stop=1
		elif ! grep -iwqs 'onraiderror=ignore' /proc/cmdline; then
			echo "*** - Press ENTER for dropping you to a shell;"
			echo "***   the system will reboot when you leave the shell."
			echo "*** - Or wait 1 minute to continue normal startup."
			read -t 60 && stop=1
		fi

		if [ -n "$stop" ]; then
			PS1="(RAID Repair) \# # "; export PS1
			sulogin

			echo "Unmounting file systems"
			umount -arnf
			mount -n -o remount,ro /
			echo "Automatic reboot in progress."
			reboot -f
		else
			echo "*** Trying to continue normal startup."
		fi
		unset stop
	fi
fi

# Activate LVM
if [ -z "$EVMS_ACTIVE" ]; then
	/etc/rc.d/scripts/lvm_start
fi

# Check filesystems
splash_update localfs 5
_RUN_QUOTACHECK=0
if [ -z "$fastboot" ]; then
	STRING="Checking filesystems"
	echo "$STRING"
	# (pixel) do not check loopback files, will be done later (aren't available yet)
	initlog -c "fsck -TRAay -t noloop $fsckoptions"
	rc=$?

	if [ $rc = 0 ]; then
		success "$STRING"
		echo
	elif [ $rc = 1 ]; then
		passed "$STRING"
		echo
	else
		failure "$STRING"
		echo
	fi

	if [ $rc -gt 1 ]; then
		# A return of 3 or higher means there were serious problems.
		if [ $rc -gt 3 ]; then
			echo
			echo "*** An error occurred during the file system check."
			echo "*** Dropping you to a shell; the system will reboot"
			echo "*** when you leave the shell."

			PS1="(Repair filesystem) \# # "; export PS1
			sulogin
		fi

		echo "Unmounting file systems."
		umount -arnf
		echo "Remounting root filesystem readonly."
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot -f
	elif [ $rc = 1 ]; then
		_RUN_QUOTACHECK=1
	fi
fi

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted). Contrary to standard usage,
# filesystems are NOT unmounted in single user mode
# (pixel) also do not mount loopback, will be done later
splash_update mount 6
action "Mounting local filesystems:" mount -a -t nodavfs,ftpfs,loop,ncp,ncpfs,nfs,proc,smbfs,sshfs -O no_netdev

# (pixel) Check loopback filesystems
if [ -z "$fastboot" ]; then
	STRING="Checking loopback filesystems:"
	echo -n "$STRING "
	initlog -c "fsck -TRAay -t loop,ext2 $fsckoptions"
	rc=$?
	if [ "$rc" = "0" ]; then
		success "$STRING"
		echo
	elif [ "$rc" = "1" ]; then
		passed "$STRING"
		echo
	fi

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		failure "$STRING"
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \#"; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -arnf
		mount -n -o remount,ro /
		echo "Automatic reboot in progress."
		reboot -f
	elif [ "$rc" = "1" -a -x "$QUOTACHECK" ]; then
		action "Checking filesystem quotas:" "$QUOTACHECK" -v -R -a
	fi
fi

# Mount loopback
action "Mounting loopback filesystems:" mount -a -t loop,ext2,vfat -O no_netdev

# At this point everything should be mounted

# Set system font again, if required
[ -n "$SETSYSFONT_DONE" ] || ExecIfExecutable /sbin/setsysfont >/dev/null 2>&1

if [ "$_RUN_QUOTACHECK" = 1 -a -x "$QUOTACHECK" ]; then
	action "Checking filesystem quotas:" "$QUOTACHECK" -v -R -a
fi

if [ -x /sbin/quotaon ]; then
	action "Turning on user and group quotas for local filesystems:" /sbin/quotaon -a
fi

# Do the following while waiting for an 'I' from the user...
{

# Cleanup everything :)
action "Cleaning up temporary files from previous boot:" /etc/rc.d/scripts/cleanup

# Language fixes
/etc/rc.d/scripts/lang

# Now turn on swap again (in case we swap to files)
splash_update swap 7
action "Activating swap space:" swapon -a

# Initialize the serial ports
ExecIfExecutable /etc/rc.d/rc.serial

# Initialize firewall
for f in /etc/rc.d/scripts/firewall /etc/rc.d/rc.firewall /etc/rc.firewall; do
	if ExecIfExecutable "$f"; then
		break
	fi
done

# If they asked for ide-scsi, load it
if grep -iwqs ide-scsi /proc/cmdline; then
	modprobe ide-cd >/dev/null 2>&1
	modprobe ide-scsi >/dev/null 2>&1
fi

# Check if /mnt/cdrom and /mnt/floppy are here - if not create them
[ -d /mnt/cdrom ] || action "Creating /mnt/cdrom:" mkdir -p /mnt/cdrom
[ -d /mnt/floppy ] || action "Creating /mnt/floppy:" mkdir -p /mnt/floppy

splash_update chrooted 8
if [ -x /usr/sbin/update_chrooted ]; then
	action "Updating chrooted environments:" /usr/sbin/update_chrooted conf lib
fi

# Tune RSBAC if required
ExecIfExecutable /etc/rc.d/scripts/rsbac_autotune

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg >/var/log/dmesg
kill -TERM `pidof getkey` >/dev/null 2>&1

} &

if [ -n "$PROMPT" ]; then
	getkey i || PROMPT=
fi
wait

if [ -n "$PROMPT" ]; then
	touch /var/run/confirm
fi
