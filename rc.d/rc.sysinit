#!/bin/sh
#
# /etc/rc.d/rc.sysinit - run once at boot time
#
# Taken in part from Miquel van Smoorenburg's bcheckrc.
#

# Rerun ourselves through initlog
if [ -z "$IN_INITLOG" ]; then
 [ -f /sbin/initlog ] && exec /sbin/initlog $INITLOG_ARGS -r /etc/rc.d/rc.sysinit
fi

# Set the path
PATH=/bin:/sbin:/usr/bin:/usr/sbin
export PATH

# Read in config data.
if [ -f /etc/sysconfig/network ]; then
    . /etc/sysconfig/network
else
    NETWORKING=no
    HOSTNAME=localhost
fi

# Source functions
. /etc/rc.d/init.d/functions

# Print a banner. ;)
echo -en "\t\t\tWelcome to Linux "
[ "$BOOTUP" != "serial" ] && echo -en "\\033[1;36m"
echo -e "Mandrake"
[ "$BOOTUP" != "serial" ] && echo -en "\\033[0;39m"
if [ "$PROMPT" != "no" ]; then
 echo -en "\t\tPress 'I' to enter interactive startup."
 echo
 sleep 1
fi

# Try to get devfsd
if [ -c /dev/.devfsd -a -x /sbin/devfsd ]; then
    action "Running DevFs deamon" devfsd /dev
    for i in /dev/cdroms/*;do 
	ln -sf $i /dev/
    done
    if [ -e /dev/cdrom0	]; then
	ln -sf /dev/cdrom0 /dev/cdrom
    fi
    if [ -f /etc/sysconfig/mouse ];then
	. /etc/sysconfig/mouse
	device=`echo $device | sed -e 's/psaux/misc\/psaux/' -e 's/ttyS\(.\)/tts\/\1/g'`
	if [ -n "$device" ]; then
	    ln -s /dev/$device /dev/mouse
	fi
    fi
fi

# Fix console loglevel
/bin/dmesg -n $LOGLEVEL

# Mount /proc (done here so volume labels can work with fsck)

action "Mounting proc filesystem" mount -n -t proc /proc /proc
chgrp proc /proc >/dev/null 2>&1 ||:

# Configure kernel parameters
action "Configuring kernel parameters" sysctl -p /etc/sysctl.conf

# Set the system clock.
/etc/rc.d/init.d/clock

# Load keymap and system font
. /etc/rc.d/init.d/console
  
# Start up swapping.
action "Activating swap partitions" swapon -a

# Set the hostname.
action "Setting hostname ${HOSTNAME}" hostname ${HOSTNAME}

# Set the NIS domain name
if [ -n "$NISDOMAIN" ]; then
    action "Setting NIS domain name $NISDOMAIN" domainname $NISDOMAIN
else
    domainname ""
fi

if [ -f /fsckoptions ]; then
	fsckoptions=`cat /fsckoptions`
    else
	fsckoptions=
fi

if [ -f /forcefsck ]; then
	fsckoptions="-f $fsckoptions"
fi

if [ "$BOOTUP" != "serial" ]; then
	fsckoptions="-C $fsckoptions"
else
	fsckoptions="-V $fsckoptions"
fi

_RUN_QUOTACHECK=0
if [ ! -f /fastboot ]; then
	STRING="Checking root filesystem"
	echo $STRING
	initlog -c "fsck -Tay $fsckoptions /"
	rc=$?
	
	if [ "$rc" = "0" ]; then
		success "$STRING"
		echo
	elif [ "$rc" = "1" ]; then
		passed "$STRING"
		echo
        fi
	
        # A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		failure "$STRING"
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \# # "; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -arnf
		echo "Automatic reboot in progress."
		reboot -f
	elif [ "$rc" = "1" ]; then
		_RUN_QUOTACHECK=1
	fi
fi

# check for arguments 

if grep -i nopnp /proc/cmdline >/dev/null ; then
    PNP=
else
    PNP=yes
fi

# set up pnp 
if [ -x /sbin/isapnp -a -f /etc/isapnp.conf ]; then
    if [ -n "$PNP" ]; then
	action "Setting up ISA PNP devices" /sbin/isapnp /etc/isapnp.conf
    else
	action "Skipping ISA PNP configuration at users request" /bin/true
    fi
fi

# Remount the root filesystem read-write.
action "Remounting root filesystem in read-write mode" mount -n -o remount,rw /

# Clear mtab
>/etc/mtab

# Remove stale backups
rm -f /etc/mtab~ /etc/mtab~~

# Enter root and /proc into mtab. (pixel) also added /initrd/loopfs for loopback root
mount -f /initrd/loopfs 2>/dev/null
mount -f /
mount -f /proc

# Update quotas if fsck was run on /.
if [ X"$_RUN_QUOTACHECK" = X1 -a -x /sbin/quotacheck ]; then
	action "Checking root filesystem quotas"  /sbin/quotacheck -v /
fi

# The root filesystem is now read-write, so we can now log via syslog() directly..
if [ -n "$IN_INITLOG" ]; then
    IN_INITLOG=
fi

echo ${HOSTNAME} > /etc/HOSTNAME

if ! grep -i nomodules /proc/cmdline >/dev/null && [ -f /proc/ksyms ]; then
    USEMODULES=y
else
    USEMODULES=
fi

# Our modutils don't support it anymore, so we might as well remove
# the preferred link.
rm -f /lib/modules/preferred
rm -f /lib/modules/default
if [ -x /sbin/depmod -a -n "$USEMODULES" ]; then
    # If they aren't using a recent sane kernel, make a link for them
    if [ ! -n `uname -r | grep "-"` ]; then
       ktag="`cat /proc/version`"
       mtag=`grep -l "$ktag" /lib/modules/*/.rhkmvtag 2> /dev/null`
       if [ -n "$mtag" ]; then
          mver=`echo $mtag | sed -e 's,/lib/modules/,,' -e 's,/.rhkmvtag,,' -e 's,[ 	].*$,,'`
       fi
       if [ -n "$mver" ]; then
         ln -sf /lib/modules/$mver /lib/modules/default
	 [ -f "/boot/module-info-$mver" ] && \
		ln -sf /boot/module-info-$mver /boot/module-info
	 [ -f "/boot/System.map-$mver" ] && \
		ln -sf /boot/System.map-$mver /boot/System.map 2>/dev/null
       fi
    fi
    if [ -L /lib/modules/default ]; then
    	INITLOG_ARGS= action "Finding module dependencies" depmod -a default
    else
	[ -x /sbin/is_depmod_necessary ] && /sbin/is_depmod_necessary 2>/dev/null || \
	INITLOG_ARGS= action "Finding module dependencies" depmod -a
    fi
fi

if [ -f /proc/sys/kernel/modprobe ]; then
   if [ -n "$USEMODULES" ]; then
       sysctl -w kernel.modprobe="/sbin/modprobe" >/dev/null 2>&1
   else
       # We used to set this to NULL, but that causes 'failed to exec' messages"
       sysctl -w kernel.modprobe="/bin/true" >/dev/null 2>&1
   fi
fi

# Load modules (for backward compatibility with VARs)
if [ -x /etc/rc.d/rc.modules ]; then
	/etc/rc.d/rc.modules
fi

# Add raid devices
if [ -f /proc/mdstat -a -f /etc/raidtab ]; then
	echo -n "Starting up RAID devices: " 

	rc=0
	
	for i in `grep "^raiddev" /etc/raidtab | awk '{print $2}'`
	do
		RAIDDEV=`basename $i`
		RAIDSTAT=`grep "^$RAIDDEV : active" /proc/mdstat`
		if [ -z "$RAIDSTAT" ]; then
			# Try raidstart first...if that fails then
			# fall back to raidadd, raidrun.  If that
			# also fails, then we drop to a shell
			RESULT=1
			if [ -x /sbin/raidstart ]; then
				/sbin/raidstart $i
				RESULT=$?
			fi
			if [ $RESULT -gt 0 -a -x /sbin/raid0run ]; then
				/sbin/raid0run $i
				RESULT=$?
			fi
			if [ $RESULT -gt 0 -a -x /sbin/raidadd -a -x /sbin/raidrun ]; then
				/sbin/raidadd $i
				/sbin/raidrun $i
				RESULT=$?
			fi
			if [ $RESULT -gt 0 ]; then
				rc=1
			fi
			echo -n "$RAIDDEV "
		else
			echo -n "$RAIDDEV "
		fi
	done
	echo

	# A non-zero return means there were problems.
	if [ $rc -gt 0 ]; then
		echo
		echo
		echo "*** An error occurred during the RAID startup"
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(RAID Repair) \# # "; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -arnf
		echo "Automatic reboot in progress."
		reboot -f
	fi
fi

_RUN_QUOTACHECK=0
# Check filesystems
# (pixel) do not check loopback files, will be done later (aren't available yet)
if [ ! -f /fastboot ]; then
	STRING="Checking filesystems"
	echo $STRING
	initlog -c "fsck -TRAay -t noloop $fsckoptions"
	rc=$?
	if [ "$rc" = "0" ]; then
		success "$STRING"
		echo
	elif [ "$rc" = "1" ]; then
		passed "$STRING"
		echo
	fi

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		failure "$STRING"
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \# # "; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -arnf
		echo "Automatic reboot in progress."
		reboot -f
	elif [ "$rc" = "1" -a -x /sbin/quotacheck ]; then
		_RUN_QUOTACHECK=1
	fi
fi

# Mount all other filesystems (except for NFS and /proc, which is already
# mounted). Contrary to standard usage,
# filesystems are NOT unmounted in single user mode.
# (pixel) also do not mount loopback, will be done later
action "Mounting local filesystems" mount -a -t nonfs,smbfs,ncpfs,proc,loop

# (pixel) Check loopback filesystems
if [ ! -f /fastboot ]; then
	STRING="Checking loopback filesystems"
	echo -n $STRING
	initlog -c "fsck -TRAay -t loop,ext2 $fsckoptions"
	rc=$?
	if [ "$rc" = "0" ]; then
		success "$STRING"
		echo
	elif [ "$rc" = "1" ]; then
		passed "$STRING"
		echo
	fi

	# A return of 2 or higher means there were serious problems.
	if [ $rc -gt 1 ]; then
		failure "$STRING"
		echo
		echo
		echo "*** An error occurred during the file system check."
		echo "*** Dropping you to a shell; the system will reboot"
		echo "*** when you leave the shell."

		PS1="(Repair filesystem) \#"; export PS1
		sulogin

		echo "Unmounting file systems"
		umount -arnf
		echo "Automatic reboot in progress."
		reboot -f
	elif [ "$rc" = "1" -a -x /sbin/quotacheck ]; then
		action "Checking filesystem quotas" /sbin/quotacheck -v -R -a
	fi
fi

# Mount loopback
action "Mounting loopback filesystems" mount -a -t loop,ext2,vfat

# at this point everything should be mounted; if the loading
# of the system font failed, try again
if [ "$DELAYED_FONT" = "yes" ]; then
   if [ -x /sbin/setsysfont ]; then
       [ -f /etc/sysconfig/i18n ] && . /etc/sysconfig/i18n
       action "Setting default font" /sbin/setsysfont
   fi
fi

# Try to get linuxconf profile.
if profile=$(sed 's/.*prof=\([A-Za-z]*\).*$/\1/' /proc/cmdline) && \
			[ -d  "/etc/linuxconf/archive/$profile" ] && \
	! grep -q "confver.current $profile" /etc/conf.linuxconf;then

	action "Setting profile to $profile " /bin/linuxconf --selectprofile $profile
	
	# Setting again network scripts.
	if [ -f /etc/sysconfig/network ]; then
	    source /etc/sysconfig/network
	    hostname ${HOSTNAME}
	    [ -n "$NISDOMAIN" ] && domainname $NISDOMAIN
	fi
fi

if [ X"$_RUN_QUOTACHECK" = X1 -a -x /sbin/quotacheck ]; then
	action "Checking filesystem quotas"  /sbin/quotacheck -v -R -a
fi

# Configure machine if necessary.
if [ -f /.unconfigured ]; then
    if [ -x /usr/bin/passwd ]; then 
        /usr/bin/passwd root
    fi
    if [ -x /usr/sbin/netconfig ]; then
	/usr/sbin/netconfig
    fi
    if [ -x /usr/sbin/timeconfig ]; then
	/usr/sbin/timeconfig
    fi
    if [ -x /usr/sbin/authconfig ]; then
	/usr/sbin/authconfig --nostart
    fi
    if [ -x /usr/sbin/ntsysv ]; then
	/usr/sbin/ntsysv --level 35
    fi

    # Reread in network configuration data.
    if [ -f /etc/sysconfig/network ]; then
	. /etc/sysconfig/network

	# Reset the hostname.
	action "Resetting hostname ${HOSTNAME}" hostname ${HOSTNAME}

	# Reset the NIS domain name.
	if [ -n "$NISDOMAIN" ]; then
	    action "Resetting NIS domain name $NISDOMAIN" domainname $NISDOMAIN
	else
	    domainname ""
	fi
    fi

    rm -f /.unconfigured
fi

if [ -x /sbin/quotaon ]; then
    action "Turning on user and group quotas for local filesystems" /sbin/quotaon -a
fi

# Clean out /etc.
rm -f /fastboot /fsckoptions /forcefsck

# Do we need (w|u)tmpx files? We don't set them up, but the sysadmin might...
_NEED_XFILES=
[ -f /var/run/utmpx -o -f /var/log/wtmpx ] && _NEED_XFILES=1

# Clean up /var
# I'd use find, but /usr may not be mounted.
for afile in /var/lock/* /var/run/*; do
	if [ -d "$afile" ]; then
		if [ "$(basename "$afile")" != "news" ]; then
			rm -rf -- "$afile"/*
		fi
	else
		if [ "$afile" != "/var/lock/TMP_1ST" ]; then
			rm -f -- "$afile"
		fi
	fi
done

{
# Clean up utmp/wtmp
>/var/run/utmp
touch /var/log/wtmp
chgrp utmp /var/run/utmp /var/log/wtmp
chmod 0664 /var/run/utmp /var/log/wtmp
if [ -n "$_NEED_XFILES" ]; then
  >/var/run/utmpx
  touch /var/log/wtmpx
  chgrp utmp /var/run/utmpx /var/log/wtmpx
  chmod 0664 /var/run/utmpx /var/log/wtmpx
fi

# Delete X locks
rm -f /tmp/.X*-lock

# Delete KDE sockets
rm -f /tmp/k{fm,io}_*

# Delete Postgres sockets
rm -f /tmp/.s.PGSQL.*

# Right, now turn on swap in case we swap to files.
swapon -a >/dev/null 2>&1
action "Enabling swap space" /bin/true

# Initialize the serial ports.
if [ -f /etc/rc.d/rc.serial ]; then
	. /etc/rc.d/rc.serial
fi

if [ -r /etc/rc.d/rc.firewall ]; then
	. /etc/rc.d/rc.firewall
fi

# If a SCSI tape has been detected, load the st module unconditionally
# since many SCSI tapes don't deal well with st being loaded and unloaded
if [ -f /proc/scsi/scsi ] && grep -q 'Type:   Sequential-Access' /proc/scsi/scsi 2>/dev/null ; then
	if grep -qv ' 9 st' /proc/devices ; then
		if [ -n "$USEMODULES" ] ; then
			# Try to load the module.  If it fails, ignore it...
			insmod -p st >/dev/null 2>&1 && modprobe st >/dev/null 2>&1
		fi
	fi
fi

# Adjust symlinks as necessary in /boot to keep system services from
# spewing messages about mismatched System maps and so on.
if [ -L /boot/System.map -a -r /boot/System.map-`uname -r` ] ; then
	ln -sf System.map-`uname -r` /boot/System.map 2>/dev/null
fi
if [ ! -e /boot/System.map -a -r /boot/System.map-`uname -r` ] ; then
	ln -sf System.map-`uname -r` /boot/System.map 2>/dev/null
fi

# Now that we have all of our basic modules loaded and the kernel going,
# let's dump the syslog ring somewhere so we can find it later
dmesg > /var/log/dmesg
kill -TERM `/sbin/pidof getkey` >/dev/null 2>&1
} &
if [ "$PROMPT" != "no" ]; then
   /sbin/getkey i && touch /var/run/confirm
fi
wait

if grep -q "failsafe" /proc/cmdline;then
    touch /var/run/failsafe
fi

if [ -f /var/lock/TMP_1ST ];then
 if [ -f /etc/rc.d/init.d/mandrake_firstime ];then
	/bin/sh /etc/rc.d/init.d/mandrake_firstime
 fi
fi

if [ -f /etc/rc.d/init.d/mandrake_everytime ];then 
	/bin/sh /etc/rc.d/init.d/mandrake_everytime
fi
